
* Packages
** Source list
   #+begin_src emacs-lisp :tangle yes
     (require 'package)
     (setq package-archives
      '(("nongnu" . "https://elpa.nongnu.org/nongnu/")
	      ("melpa" . "https://melpa.org/packages/")
	      ("gnu" . "https://elpa.gnu.org/packages/")))
     (package-initialize)
   #+end_src
** Package refresh
   #+begin_src emacs-lisp :tangle yes
     ;; 구 버전 패키지 저장않게
     (unless (boundp 'package-pinned-packages)
       (setq package-pinned-packages ()))

     ;; 설치 여부 확인, 없을 경우 설치
     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))

     ;; 에러가 발생할 경우 elpa 폴더 제거, 새로 설치
     (eval-when-compile
       (condition-case nil
	   (require 'use-package)
	 (error 
	  (message "Use-package error; re-initializing...")
	   (delete-directory "~/.emacs.d/elpa" t)
	   (package-initialize)
	   (package-install 'use-package)
	   (require 'use-package))))

     ;; 로딩 속도가 느린 패키지는 *message* 버퍼에 표시 
     ;(setq use-package-verbose t) 
     ;; use-package에서 불러오는 패키지가 설치 여부 확인. 미 설치 자동설치
     (setq use-package-always-ensure t)

     ;; auto package UPDATE
     (use-package auto-package-update
	 ;use-package는 패키지를 설치하고 로딩하지만, 자동 업데이트 않음.
	 ;; 이를 위해 auto-package-update.el 설치
       :config
       ;; 자동으로 업데이트 진행
       (auto-package-update-maybe)
       ;; 1달(4주)에 한번 빈도로 자동 업데이트
       (setq auto-package-update-interval 28)
       ;; 업데이트 진행 여부 확인
       (setq auto-package-update-prompt-before-update t)
       ;; 이전 버전 파일 삭제
       (setq auto-package-update-delete-old-versions t))

     (setq
     ;Emacs는 패키지 설치할 때 관련 정보를 init.el에 기록.방지
      package--init-file-ensured t
     ;; org 관련 프로세스가 자동 종료되게.
      kill-buffer-query-functions nil
     ;; 오래된 버전 파일 로드않고 재컴파일
      load-prefer-newer t)
   #+end_src
* Korean. LANG
** Korean hangul
  #+begin_src emacs-lisp :tangle yes
    ;; LANG - eshell locale
    (setenv "LANG" "ko_KR.UTF-8")

    ;; UTF-8 설정
     ;(set-language-environment 'utf-8)
     (setq locale-coding-system 'utf-8)
     (set-default-coding-systems 'utf-8)
     (set-terminal-coding-system 'utf-8)
  #+end_src
** default Fonts
   #+begin_src emacs-lisp :tangle yes
     (set-face-attribute 'default nil
				 :family "D2coding"
				 :foundry "SAND"
				 :slant 'normal
				 :weight 'normal
				 :height 130
				 :width 'normal)

  #+end_src
** Keyboard
   #+begin_src emacs-lisp :tangle yes
    ;; Keyboard 2벌식
    (setq default-input-method "korean-hangul")
     ;; S+Space
    (global-set-key (kbd "S-SPC") 'toggle-input-method)
   #+end_src
** korean Calendar
   #+begin_src emacs-lisp :tangle yes
     ;;for korean
     ;;https://emacsredux.com/blog/2021/06/08/emacs-as-your-calendar/
     (setq calendar-week-start-day 1 
	   calendar-day-name-array ["일" "월" "화" "수" "목" "금" "토"]
	   calendar-day-header-array ["일" "월" "화" "수" "목" "금" "토"]
	   calendar-month-name-array ["1월" "2월" "3월" "4월" "5월" "6월" "7월" "8월" "9월" "10월" "11월" "12월"])
   #+end_src
** korean holidays
   #+begin_src emacs-lisp :tangle yes
     ;;https://m.blog.naver.com/jodi999/221008996220
     (setq calendar-holidays korean-holidays)
     ;(setq calendar-holidays (append calendar-holidays korean-holidays)
   #+end_src 
* Window, Global Key
** Window
  #+begin_src emacs-lisp :tangle yes
    ; cursor
    (setq-default cursor-type 'box)
    ;(setq-default cursor-type 'bar)
    ;(setq-default cursor-type 'hbar)

    ;Window title 
    (setq frame-title-format "dole's Emacs - %b")
    (setq icon-title-format "Emacs - %b")

    ;시작 화면 메세지 끄기
    (setq inhibit-startup-message t)
    (setq initial-scratch-message "")

    ;상단 메뉴 숨기기0, 보이기 1
    (menu-bar-mode 1)

    ;도구 모음 숨기기
    (tool-bar-mode 0)

    ;;GUI환경 시작시 창화면 최대화
    (add-to-list 'default-frame-alist'(fullscreen . maximized))

    ; 라인 표시하기
    (global-linum-mode 1)

    ;; 선택영역 표시
    (transient-mark-mode t)

    ;; wordrap
    (add-hook 'text-mode-hook 'turn-on-visual-line-mode)

    ;GUI 화경에서 줄 간격 조절
    (setq-default line-spacing 6)

    ;파일이 수정되었을 때 자동으로 다시 읽어드리도록
    ;(global-auto-revert-mode t)

    ;찾기 기능에서 하이라이트 설정
    (setq search-highlight t)    
  #+end_src
** Recent File
    #+begin_src emacs-lisp :tangle yes
    ;;파일 편집 위치 기억
;    (require 'saveplace)
;    (setq-default save-place t)
;    (setq save-place-file "~/_places.sav")

    ;;최근 파일 접근
    (require 'recentf)
    (recentf-mode 1)
    (setq recentf-max-menu-items 10)

    #+end_src
** Theme
*** default theme
    #+begin_src emacs-lisp :tangle yes
      (load-theme 'material t)
    #+end_src
*** custom theme
    #+begin_src emacs-lisp :tangle yes
      (use-package material-theme
       ;material
       :ensure t
	:defer t)

      (use-package zenburn-theme
	;zenburn
	:ensure t
	:defer t)

      (use-package solarized-theme
	;solarized
	:defer t
	:init
	(setq solarized-use-variable-pitch nil)
	:ensure t)
   #+end_src
*** Switch themes
    #+begin_src emacs-lisp :tangle yes
      ;; https://github.com/nkicg6/emacs-config/blob/master/config.org
      (defun switch-theme (theme)
	"Disables any currently active themes and loads THEME."
	;; This interactive call is taken from `load-theme'
	(interactive
	 (list
	  (intern (completing-read "Choice theme: "
				   (mapc 'symbol-name
					 (custom-available-themes))))))
	(let ((enabled-themes custom-enabled-themes))
	  (mapc #'disable-theme custom-enabled-themes)
	  (load-theme theme t)))

      (defun disable-active-themes ()
	"Disables any currently active themes listed in `custom-enabled-themes'."
	(interactive)
	(mapc #'disable-theme custom-enabled-themes))

      (global-set-key (kbd "C-c t") 'switch-theme)
    #+end_src
** Initial mode
   #+begin_src emacs-lisp :tangle yes
    ;시작 모드를 ORGMode로
     (setq initial-major-mode 'org-mode)
   #+end_src
** Global key
   #+begin_src emacs-lisp :tangle yes
      ;; org capture
      (global-set-key (kbd "C-c c") 'org-capture)
      (global-set-key (kbd "C-x C-r") 'recentf-open-files)
     ;c-x w 'news
     ;c-c t 'switch themes
   #+end_src
* emacs-Mode
** Cua-mode
   #+begin_src emacs-lisp :tangle yes
     ;; CTR+C,V ; for win user
     (cua-mode)
   #+end_src
** Org-mode
*** org
    #+begin_src emacs-lisp :tangle yes
      (use-package org
   ;;	:ensure org-plus-contrib     ;for org-contacts
	:config
   ;; org문서,항목의 깊이에 따라 들여쓰기. 단, 항목의 star는 숨기지 않음
	(progn
	  (setq org-startup-indented nil)
	  (setq org-hide-leading-stars nil)
	  (setq org-adapt-indentation t)))
      
	  ;(setq org-image-actual-width nil)        ;image fulscreen hebit
	  ;(setq org-latex-image-default-width "") ;LaTeX 이미지 크기를 90%
      
	;; 할 일 설정하기 Todo
	; C-c C-v - 현재 문서에 있는 할 일 목록 보기
	; C-c / t - 현재 할 일 항목외 모두 접기
	(setq org-todo-keywords
	 '((sequence "TODO" "ING" "WAIT" "DONE")))
    #+end_src    
*** Agenda
    #+begin_src emacs-lisp :tangle yes
    ;; for agenda
    ; C-c [ - 아젠다 파일 목록에 문서 추가
    ; C-c ] - 아젠다 파일 목록에서 문서를 제거
    ; C-c . - 일자 추가
    ; C-u C-c - 일자와 시간 추가
    ; C-g - 하던 일 멈추고 벗어남. 명령 취소;

    (setq org-agenda-files '("~/Dropbox/Doc/Life/org/memo_Main.org"
			     "~/Dropbox/Doc/Life/org/Agenda.org"))
      
    (add-hook 'org-mode-hook 
	      (lambda ()
	      (local-set-key (kbd "C-c a") 'org-agenda)))
    #+end_src    
*** Capture
    #+begin_src emacs-lisp :tangle yes
    ;; global key: C-c c
   (setq org-capture-templates
    '(
	  ("j" "Journal" entry (file+datetree "~/Dropbox/Doc/Life/org/journal.org")
	   "* %?\n insert on: %U %i")
	  ("c" "Contacts" entry (file+headline "~/Dropbox/Doc/Life/org/contacts.org" "Biz")
	   "** 이름: %?\n  - 회사: \n  - 연락: \n  - 메모: \n   %t"))
       )
    #+end_src
*** for bullet
    #+begin_src emacs-lisp :tangle yes
    ;; org-superstar  ;; improved version of org-bullets
    (use-package org-superstar
	:ensure t
	:config
    (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1))))
    #+end_src
*** export PDF,markdown
   #+begin_src emacs-lisp :tangle yes
     ;; for export PDF
     (setenv "PATH" (concat (getenv "PATH") ":/Library/TeX/texbin")) ;;for MacTeX
     (setq org-latex-to-pdf-process
	     '("pdflatex -interaction nonstopmode -output-directory %o %f"
	       "pdflatex -interaction nonstopmode -output-directory %o %f"
	       "pdflatex -interaction nonstopmode -output-directory %o %f"))

     ;; for export markdown
	(eval-after-load "org"
	 '(require 'ox-md nil t))
   #+end_src   
*** for Slide
   #+begin_src emacs-lisp :tangle yes
    (use-package org-tree-slide
	:custom
     (org-image-actual-width nil))
    #+end_src
** Yasnippet
   #+begin_src emacs-lisp :tangle yes
    ;; for global-mode
     (use-package yasnippet
	      :ensure t
	      :init
	 (progn
	     (yas-global-mode 1)
    ))
     ;; for minor-mode	  
     ;; (yas-reload-all)
     ;; (add-hook 'prog-mode-hook #'yas-minor-mode)
   #+end_src
** Company
   #+begin_src emacs-lisp :tangle yes
     ;;auto-complete
     (use-package company
	:config
        (setq company-idle-delay 0
	      company-minimum-prefix-length 3
	      company-selection-wrap-around t))
     (global-company-mode)
   #+end_src
** Which-key
   #+begin_src emacs-lisp :tangle yes
     ;; which-key
     (use-package which-key
	 :ensure t
	 :config
       (which-key-mode))
   #+end_src
** Ace-window
   #+begin_src emacs-lisp :tangle yes
     ;; Ace-window
     (global-set-key (kbd "M-o") 'ace-window)
     ;(global-set-key [M-left] 'windmove-left)          ; move to left window
     ;(global-set-key [M-right] 'windmove-right)        ; move to right window
     ;(global-set-key [M-up] 'windmove-up)              ; move to upper window
     ;(global-set-key [M-down] 'windmove-down)          ; move to lower window
   #+end_src
** Markdown-mode
   #+begin_src emacs-lisp :tangle yes
     ;; mark-down mode
     (use-package markdown-mode
       :ensure t
       :commands (markdown-mode gfm-mode)
       :mode (("README\\.md\\'" . gfm-mode)
	      ("\\.md\\'" . markdown-mode)
	      ("\\.markdown\\'" . markdown-mode))
       )
     ;  :init (setq markdown-command "multimarkdown")) ;; 기본 마크다운 렌더링 엔진
   #+end_src
** Joplin
   #+begin_src emacs-lisp :tangle yes
   ;; sync for Joplin external editor
   ;; emacs가 원본 파일을 계속 편집하는 동안 내용을 새 파일에 복사,백업 파일  만듬
   ;; markdown-mode일 경우 : Bug
    ;;(add-hook 'markdown-mode-hook
    ;;      '(setq backup-by-copying t))
   ;(setq backup-by-copying t)
   #+end_src
** ivy,counsel,swiper
   #+begin_src emacs-lisp :tangle yes
   ;; Ivy는 자동완성을 도와주는 도구
   ;; Ivy는 Ivy를 사용해 이맥스의 기본 기능을 개선시킨 함수들을 제공하는데 이를 Counsel이라 함.
   ;; Swiper는 이맥스의 검색 기능(Ctrl-s)를 개선시킨 함수입니다. 이 세 종류의 기능을 보통 함께 
     (use-package counsel
       :ensure t)

     (use-package ivy
       :ensure t
       :config
       (setq ivy-use-virtual-buffers t)
       (setq enable-recursive-minibuffers t)
       ;; enable this if you want `swiper' to use it
       ;; (setq search-default-mode #'char-fold-to-regexp)
       (global-set-key (kbd "C-s") 'swiper)
      ; (global-set-key (kbd "C-c C-r") 'ivy-resume)
       (global-set-key (kbd "<f6>") 'ivy-resume)
       (global-set-key (kbd "M-x") 'counsel-M-x)
       (global-set-key (kbd "C-x C-f") 'counsel-find-file)
       (global-set-key (kbd "<f1> f") 'counsel-describe-function)
       (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
       (global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
       (global-set-key (kbd "<f1> l") 'counsel-find-library)
       (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
       (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
      ; (global-set-key (kbd "C-c g") 'counsel-git)
      ; (global-set-key (kbd "C-c j") 'counsel-git-grep)
      ; (global-set-key (kbd "C-c k") 'counsel-ag)
      ; (global-set-key (kbd "C-x l") 'counsel-locate)
      ; (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
       (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history))
   #+end_src
** Elfeed
   #+begin_src emacs-lisp :tangle yes
     #+begin_center
;     (global-set-key (kbd "C-x w") 'elfeed)
;     (require 'elfeed-org)
;	      (elfeed-org)
;      (setq rmh-elfeed-org-files (list "/Users/hykim/.emacs.d/elfeeds.org"))
;     #+end_center
;      (setq-default elfeed-search-filter "@2-week-ago +unread ")
   #+end_src
