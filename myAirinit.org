* Packages
** Source list
   #+begin_src emacs-lisp :tangle yes
     (require 'package)
     (setq package-archives
      '(("nongnu" . "https://elpa.nongnu.org/nongnu/")
	      ("melpa" . "https://melpa.org/packages/")))
	;;      ("gnu" . "https://elpa.gnu.org/packages/")))
     (package-initialize)
   #+end_src
** use Package
   #+begin_src emacs-lisp :tangle yes
     ;; use-package install
     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))
     (setq use-package-always-ensure t)
   #+end_src
* General, Window
** Path
   #+begin_src emacs-lisp :tangle yes
     ;;https://www.emacswiki.org/emacs/ExecPath
      (setq exec-path (append exec-path
		       '("/Library/TeX/texbin" "/usr/bin" "/bin" "/usr/bin" "/usr/local/bin" "/sbin")))
      (setenv "PATH" (concat (getenv "PATH")
		      ":/usr/local/bin:/usr/local/sbin:/Library/TeX/texbin:/opt/homebrew/bin:/opt/homebrew/sbin:opt/homebrew/lib/pkgconfig"))
   #+end_src
** Window
*** general
    #+begin_src emacs-lisp :tangle yes
      ;;initial message stop
      (setq inhibit-startup-message t)
      (setq initial-scratch-message "")

      ;;Window title 
      (setq frame-title-format "dole's Emacs - %b")
      (setq icon-title-format "Emacs - %b")

      ;;disable menubar
      (menu-bar-mode 1)
      (tool-bar-mode -1)
      (toggle-scroll-bar -1) 

      ;;linum mode
      ;;(global-linum-mode 1)

      ;;show mark range
      (transient-mark-mode t)

      ;;wordrap
      (add-hook 'text-mode-hook 'turn-on-visual-line-mode)

      ;;kill whole line
      (setq kill-whole-line 1)

      ;;line spacing
      (setq-default line-spacing 8)

      ;;search highlight
      (setq search-highlight t)

      ;;smooth scrolling
      (require 'smooth-scrolling)
      (smooth-scrolling-mode 1)
    #+end_src
*** toggle fullscreen
    #+begin_src emacs-lisp :tangle yes
    ;; initial: fullscreen
    ;;(set-frame-parameter nil 'fullscreen 'fullboth)
    #+end_src
  
   #+begin_src emacs-lisp :tangle yes
     ;; toggle Full Screen
     ;; https://superuser.com/questions/256404/fullscreen-emacs-in-osx
     
     (defun toggle-fullscreen (&optional f)
	(interactive)
	(let ((current-value (frame-parameter nil 'fullscreen)))
	  (set-frame-parameter nil 'fullscreen
	    (if (equal 'fullboth current-value)
	      (if (boundp 'old-fullscreen) old-fullscreen nil)
	      (progn (setq old-fullscreen current-value)
		'fullboth)))))
      (global-set-key (kbd "C-x x") 'toggle-fullscreen)
   #+end_src
** Recent File
    #+begin_src emacs-lisp :tangle yes
      ;; (require 'recentf)
      ;; (recentf-mode 1)
      ;; (setq recentf-max-menu-items 10)
      ;; (global-set-key (kbd "C-x C-r") 'recentf-open-files)
    #+end_src
** Theme
*** default theme
    #+begin_src emacs-lisp :tangle yes
      (load-theme 'material t)
    #+end_src
*** custom theme
    #+begin_src emacs-lisp :tangle yes
     (use-package material-theme
        :ensure t
	:defer t)

     (use-package zenburn-theme
	:ensure t
	:defer t)

     (use-package solarized-theme
	:defer t
	:init
	(setq solarized-use-variable-pitch nil)
	:ensure t)
   #+end_src
*** Switch themes
   #+begin_src emacs-lisp :tangle yes
      ;; https://github.com/nkicg6/emacs-config/blob/master/config.org
     (defun switch-theme (theme)
	"Disables any currently active themes and loads THEME."
	;; This interactive call is taken from `load-theme'
	(interactive
	 (list
	  (intern (completing-read "Choice Theme : "
				   (mapc 'symbol-name
					 (custom-available-themes))))))
	(let ((enabled-themes custom-enabled-themes))
	  (mapc #'disable-theme custom-enabled-themes)
	  (load-theme theme t)))

      (defun disable-active-themes ()
	"Disables any currently active themes listed in `custom-enabled-themes'."
	(interactive)
	(mapc #'disable-theme custom-enabled-themes))

      (global-set-key (kbd "C-c t") 'switch-theme)
    #+end_src
** Initial mode
   #+begin_src emacs-lisp :tangle yes
     ;;initial mode -  ORGMode
     (setq initial-major-mode 'org-mode)
     
   #+end_src
* Korean. LANG
** Korean hangul,utf-8
  #+begin_src emacs-lisp :tangle yes
    ;; eshell locale
    (setenv "LANG" "ko_KR.UTF-8")

    ;; UTF-8
    (setq utf-translate-cjk-mode nil)
    (setq defaut-file-name-coding-system 'utf-8)
    (setq locale-coding-system 'utf-8)
    (set-language-environment 'utf-8)
    (prefer-coding-system 'utf-8)
    (set-default-coding-systems 'utf-8)
    (set-terminal-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8)
    (setq-default buffer-file-coding-system 'utf-8)
    (setq-default coding-system-for-write 'utf-8) 
  #+end_src
** default Fonts
   #+begin_src emacs-lisp :tangle yes
    (set-face-attribute 'default nil
		 :family "D2coding"
		 :foundry "SAND"
		 :slant 'normal
		 :weight 'normal
		 :height 130
		 :width 'normal)
  #+end_src
** Keyboard
   #+begin_src emacs-lisp :tangle yes
    (setq default-input-method "korean-hangul")
    (global-set-key (kbd "S-SPC") 'toggle-input-method)
   #+end_src
** korean Calendar
   #+begin_src emacs-lisp :tangle yes
     ;;for korean
     ;;https://emacsredux.com/blog/2021/06/08/emacs-as-your-calendar/
     (setq calendar-week-start-day 0 
	   calendar-day-name-array ["일" "월" "화" "수" "목" "금" "토"]
	   calendar-day-header-array ["일" "월" "화" "수" "목" "금" "토"]
	   calendar-month-name-array ["1월" "2월" "3월" "4월" "5월" "6월" "7월" "8월" "9월" "10월" "11월" "12월"])
   #+end_src
** korean holidays
   #+begin_src emacs-lisp :tangle yes
     ;;https://m.blog.naver.com/jodi999/221008996220
     (setq calendar-holidays korean-holidays)
     ;(setq calendar-holidays (append calendar-holidays korean-holidays)
   #+end_src 
* Mode
** cua-mode
   #+begin_src emacs-lisp :tangle yes
     ;; CTR+C,V ; for win user
     (cua-mode)
   #+end_src
** org-mode
*** org
    #+begin_src emacs-lisp :tangle yes
     (use-package org
	:config
        (progn
	  (setq org-startup-indented nil)
	  (setq org-hide-leading-stars nil)
	  (setq org-adapt-indentation t)))
	  ;;(setq org-image-actual-width nil)        ;image fulscreen hebit
	  ;;(setq org-latex-image-default-width "") ;LaTeX 이미지 크기를 90%

	  ;; TODO set
	  ;; C-c C-v : View todo list
	  ;; C-c / t : 현재 할 일 항목외 모두 접기
     (setq org-todo-keywords
		 '((sequence "TODO" "ING" "WAIT" "DONE")))
     (setq org-tag-alist '(("letsGo" . ?l) ("golf" . ?g) ("Buddhism" . ?b) ("Reading" . ?r) ("Agriculture" . ?a)
			   ("emacs" . ?e)))
    #+end_src    
*** Agenda
    #+begin_src emacs-lisp :tangle yes
    ;; for agenda
    ;; C-c [ - 아젠다 파일 목록에 문서 추가
    ;; C-c ] - 아젠다 파일 목록에서 문서를 제거
    ;; C-c . - 일자 추가
    ;; C-u C-c - 일자와 시간 추가
    ;; C-g - 하던 일 멈추고 벗어남. 명령 취소;

    (setq org-agenda-files '("~/Dropbox/Doc/Life/org/myNotes.org"
			     "~/Dropbox/Doc/Life/org/Agenda.org"))
      
    (add-hook 'org-mode-hook 
	      (lambda ()
	      (local-set-key (kbd "C-c a") 'org-agenda)))
    #+end_src    
*** Capture
    #+begin_src emacs-lisp :tangle yes
     ;; global key: C-c c
    (setq org-capture-templates
     '(
        ("j" "Journal" entry (file+datetree "~/Dropbox/Doc/Life/org/journal.org")
	      "* %?\n insert on: %U %i")
        ("c" "Contacts" entry (file+headline "~/Dropbox/Doc/Life/org/contacts.org" "Biz")
	      "** 이름: %?\n  - 회사: \n  - 연락: \n  - 메모: \n   %t")))
     (global-set-key (kbd "C-c c") 'org-capture)
    #+end_src
*** for bullet
    #+begin_src emacs-lisp :tangle yes
    ;; org-superstar  ;; improved version of org-bullets
    (use-package org-superstar
	:ensure t
	:config
         (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1))))
    #+end_src
*** export PDF,markdown
   #+begin_src emacs-lisp :tangle yes
     ;;for export PDF
     ;;https://emacs.stackexchange.com/questions/42558/org-mode-export-force-page-break-after-toc/42579
     (setq org-latex-title-command "\\maketitle \\newpage")
     (setq org-latex-toc-command "\\tableofcontents \\newpage")
     ;;(setq org-latex-toc-command "\\newpage \\tableofcontents \\newpage") ;Title→TOC→BlankPage→Contents

     (setq org-latex-to-pdf-process
	     '("pdflatex -interaction nonstopmode -output-directory %o %f"
	       "pdflatex -interaction nonstopmode -output-directory %o %f"
	       "pdflatex -interaction nonstopmode -output-directory %o %f"))

     ;;for export markdown
      (eval-after-load "org"
	'(require 'ox-md nil t))
   #+end_src   
*** for Slide
   #+begin_src emacs-lisp :tangle yes
    (use-package org-tree-slide
	:custom
         (org-image-actual-width nil))
    #+end_src
** Yasnippet
   #+begin_src emacs-lisp :tangle yes
    (use-package yasnippet
        :ensure t
        :init
         (progn
	      (yas-global-mode 1)))
   #+end_src
** Company
   #+begin_src emacs-lisp :tangle yes
     ;; (use-package company
     ;;    :ensure t
     ;;    :init
     ;;     (add-hook 'after-init-hook 'global-company-mode)
     ;;    :config
     ;;    (setq company-idle-delay 0
     ;; 	 company-minimum-prefix-length 3
     ;; 	 company-selection-wrap-around t))
   #+end_src
   
   #+begin_src emacs-lisp :tangle yes
     ;; (use-package company-quickhelp          ; Documentation popups for Company
     ;;  :ensure t
     ;;  :defer t
     ;;  :init (add-hook 'global-company-mode-hook #'company-quickhelp-mode))
   #+end_src
** Which-key
   #+begin_src emacs-lisp :tangle yes
    (use-package which-key
	 :ensure t
	 :config
          (which-key-mode))
   #+end_src
** Ace-window
   #+begin_src emacs-lisp :tangle yes
     (global-set-key (kbd "M-o") 'ace-window)
     (global-set-key [M-s-left] 'windmove-left)          ; move to left window
     (global-set-key [M-s-right] 'windmove-right)        ; move to right window
     (global-set-key [M-s-up] 'windmove-up)              ; move to upper window
     (global-set-key [M-s-down] 'windmove-down)          ; move to lower window
   #+end_src
** Markdown-mode
   #+begin_src emacs-lisp :tangle yes
     (use-package markdown-mode
        :ensure t
        :commands (markdown-mode gfm-mode)
        :mode (("README\\.md\\'" . gfm-mode)
	      ("\\.md\\'" . markdown-mode)
	      ("\\.markdown\\'" . markdown-mode))
       )
     ;;  :init (setq markdown-command "multimarkdown")) ;; 기본 마크다운 렌더링 엔진
   #+end_src
** ido-mode
   #+begin_src emacs-lisp :tangle yes
    (require 'ido)
    (ido-mode t)
    (ido-everywhere t)
   #+end_src
   
  #+begin_src emacs-lisp :tangle yes
    ;; ido-vertical
    (use-package ido-vertical-mode
	  :ensure t
	  :init
	  (ido-vertical-mode 1))
          (setq ido-vertical-define-keys 'C-n-and-C-p-only);default C-s,C-r
#+end_src
** Swiper,ivy,counsel
   #+begin_src emacs-lisp :tangle yes
     (ivy-mode)
       (setq ivy-use-virtual-buffers t)
       (setq enable-recursive-minibuffers t)
       ;; enable this if you want `swiper' to use it
       ;; (setq search-default-mode #'char-fold-to-regexp)
       (global-set-key "\C-s" 'swiper)
       (global-set-key (kbd "C-c C-r") 'ivy-resume)
       (global-set-key (kbd "M-x") 'counsel-M-x)
       (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
   #+end_src
** expand-region
   #+begin_src emacs-lisp :tangle yes
     ;;https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&blogId=jodi999&logNo=221063371134
     (require 'expand-region)
     (global-set-key (kbd "C-&") 'er/expand-region)
     (global-set-key (kbd "C-M-&") 'er/contract-region)
   #+end_src
** Flycheck
   #+begin_src emacs-lisp :tangle yes
     ;; (use-package flycheck
     ;;       :ensure t
     ;;       :init (global-flycheck-mode))
   #+end_src
** Pdf view
   #+begin_src emacs-lisp :tangle yes
     ;; http://alberto.am/2020-04-11-pdf-tools-as-default-pdf-viewer.html

     ;; (use-package pdf-tools
     ;;    :pin manual
     ;;    :config
     ;;     (pdf-tools-install)
     ;;     (setq-default pdf-view-display-size 'fit-width)
     ;;     (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
     ;;    :custom
     ;;     (pdf-annot-activate-created-annotations t "automatically annotate highlights"))

     ;; (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
     ;;  TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
     ;;  TeX-source-correlate-start-server t)
     ;;  (add-hook 'TeX-after-compilation-finished-functions
     ;;      #'TeX-revert-document-buffer)


      ;; (add-hook 'pdf-view-mode-hook (lambda() (linum-mode -1)))
   #+end_src
